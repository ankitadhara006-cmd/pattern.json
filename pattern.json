{
  // =========================================================
  // 1) MESSAGE STRUCTURE (MIME LAYOUT) — Any one can be used at a time
  //    Your code reads: "mimeLayout"
  //    Valid values: plain | html | alternative | mixed | related | nested | digest | report | signed | encrypted | random*
  //    *If "random", you may also define "mimeLayoutPool": ["alternative","mixed","related"] (optional)
  // =========================================================
  // "mimeLayout": "random",
  // "mimeLayout": "encrypted",
  // "mimeLayout": "nested",
  // "mimeLayout": "mixed",
  "mimeLayout": "alternative",

  // Optional pool used only when mimeLayout = "random"
  // "mimeLayoutPool": ["alternative", "mixed", "related"],


  // =========================================================
  // 2) ENCODINGS (TEXT PARTS ONLY; attachments always base64) — Any one can be used at a time
  //    Your code reads: "encoding"
  //    Valid values: quoted-printable | 7bit | 8bit | base64 | random
  // =========================================================
  // "encoding": "random",
  "encoding": "quoted-printable",
  // "encoding": "7bit",
  // "encoding": "8bit",
  // "encoding": "base64",


  // =========================================================
  // 3) BOUNDARY STRINGS — Any one can be used at a time
  //    Your code reads: "boundaryStyle", "boundaryPrefix", "boundaryHexLen"
  //    Valid styles: random | guid | nextpart | customprefix | default
  // =========================================================
  // "boundaryStyle": "random",
  // "boundaryStyle": "guid",           // ----boundary_<GUID>
  "boundaryStyle": "nextpart",         // ----=_NextPart_<RANDOMHEX>
  // "boundaryStyle": "customprefix",   // uses boundaryPrefix + hex
  // "boundaryStyle": "default",        // let MimeKit choose

  "boundaryPrefix": "----boundary_",   // used by "customprefix" (safe to keep)
  "boundaryHexLen": 24,                // 1..64 (used by nextpart/customprefix)


  // =========================================================
  // 4) SUBJECT / FROM NAME FORMATTING — Any one can be used at a time (per key)
  //    Your code reads: "subjectCase", "subjectPrefix", "fromFormat", "fromNameMode"
  // ---------------------------------------------------------
  // subjectCase: as-is | upper | lower | title
  // =========================================================
  // "subjectCase": "as-is",
  // "subjectCase": "title",
  "subjectCase": "upper",
  // "subjectCase": "lower",

  // =========================================================
  // subjectPrefix: exact string ("" means none) OR "random" (from ["", "Re:", "FW:", "[Notice]"])
  // =========================================================
  "subjectPrefix": "random",
  // "subjectPrefix": "",
  // "subjectPrefix": "Re:",
  // "subjectPrefix": "FW:",
  // "subjectPrefix": "[Notice]",

  // =========================================================
  // fromFormat: as-is | first-last | last-first | initial-dot | team
  // =========================================================
  // "fromFormat": "as-is",
  // "fromFormat": "first-last",
  "fromFormat": "last-first",
  // "fromFormat": "initial-dot",
  // "fromFormat": "team",

  // =========================================================
  // fromNameMode: perEmail | stickyPerAccount | random
  // =========================================================
  // "fromNameMode": "perEmail",
  "fromNameMode": "stickyPerAccount",
  // "fromNameMode": "random",


  // =========================================================
  // 5) TIMING / BATCH FLOW — Use this schema (your code expects "timing.*")
  //    Any one set of actual numbers can be used at a time; keep others commented.
  //    Your code reads:
  //      timing.perEmailDelayMs.min/max
  //      timing.longPauseEvery.min/max
  //      timing.longPauseDurationMs.min/max
  // =========================================================
    "timing": {
    "perEmailDelayMs": { "min": 0, "max": 0 },         // no per-email delay
    "longPauseEvery": { "min": 40, "max": 60 },        // pause after a random 40–60 emails
    "longPauseDurationMs": { "min": 7000, "max": 10000 } // pause 7–10 seconds
  },
  // Example alternatives:
  // "timing": { "perEmailDelayMs": { "min": 0, "max": 0 }, "longPauseEvery": { "min": 0, "max": 0 }, "longPauseDurationMs": { "min": 0, "max": 0 } },
  // "timing": { "perEmailDelayMs": { "min": 2000, "max": 7000 }, "longPauseEvery": { "min": 50, "max": 80 }, "longPauseDurationMs": { "min": 45000, "max": 120000 } },


  // =========================================================
  // 6) LINE WRAPPING & WHITESPACE (BODY ONLY) — Any one can be used at a time
  //    Your code reads: "bodyLineStyle"
  //    Valid values: none | wrap-76 | wrap-80 | pad-spaces | pad-tabs | html-comments
  // =========================================================
  "bodyLineStyle": "none",
  // "bodyLineStyle": "wrap-76",
  // "bodyLineStyle": "wrap-80",
  // "bodyLineStyle": "pad-spaces",
  // "bodyLineStyle": "pad-tabs",
  // "bodyLineStyle": "html-comments",


  // =========================================================
  // 7) ATTACHMENT FILE NAME STYLE — Any one can be used at a time (pick a pattern)
  //    Your code reads: "attachmentNamePatterns" (ARRAY) and "attachmentExtensionCase"
  //    Tokens: {PREFIX} {DATE} {RAND10} {NUM6} {GUID8} {EXT}
  // =========================================================
  "attachmentNamePatterns": [
    "{PREFIX}-{DATE}-{RAND10}.{EXT}"
  ],
  // Alternatives (comment above and uncomment one of these lines if you want):
  // "attachmentNamePatterns": ["{PREFIX}_{RAND10}.{EXT}"],
  // "attachmentNamePatterns": ["Invoice_{NUM6}.{EXT}"],
  // "attachmentNamePatterns": ["{DATE}_Report_{GUID8}.{EXT}"],
  // "attachmentNamePatterns": ["DOC_{RAND10}.{EXT}"],

  // Extension case policy for .pdf / .jpg
  "attachmentExtensionCase": "random"
  // "attachmentExtensionCase": "lower",
  // "attachmentExtensionCase": "upper",
  // "attachmentExtensionCase": "preserve"
  // =========================================================
  //  OPEN TRACKING
  // =========================================================
  "openTracking": true,
}
